<!DOCTYPE html>
<html lang="en" >
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Cloudinary Upload - Professional UI</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap');

    /* Reset */
    *, *::before, *::after {
      box-sizing: border-box;
    }

    body, html {
      margin: 0; padding: 0;
      height: 100%;
      font-family: 'Poppins', sans-serif;
      background: linear-gradient(135deg, #5a6bd1, #7e5abf);
      display: flex;
      justify-content: center;
      align-items: center;
      user-select: none;
      color: #fff;
      flex-direction: column;
      min-height: 100vh;
      padding: 20px;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }

    .container {
      background: rgba(255, 255, 255, 0.1);
      border-radius: 20px;
      padding: 45px 40px;
      width: 380px;
      max-width: 95vw;
      box-shadow: 0 8px 24px rgba(0,0,0,0.18);
      backdrop-filter: blur(12px);
      -webkit-backdrop-filter: blur(12px);
      border: 1px solid rgba(255, 255, 255, 0.22);
      text-align: center;
      user-select: text;
      transition: box-shadow 0.35s ease;
    }
    .container:hover {
      box-shadow: 0 12px 32px rgba(0,0,0,0.28);
    }

    h2 {
      margin-bottom: 32px;
      font-weight: 600;
      font-size: 2.1rem;
      letter-spacing: 1.2px;
      text-shadow: 0 0 8px rgba(255,255,255,0.5);
    }

    form {
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    input[type="text"],
    input[type="email"] {
      padding: 16px 20px;
      border-radius: 14px;
      border: none;
      font-size: 16px;
      font-weight: 400;
      background: rgba(255, 255, 255, 0.18);
      color: #fff;
      box-shadow: inset 0 0 12px rgba(255,255,255,0.15);
      transition: background 0.3s ease, box-shadow 0.3s ease, transform 0.15s ease;
      outline-offset: 2px;
    }

    input[type="text"]::placeholder,
    input[type="email"]::placeholder {
      color: #e1e1e1cc;
      font-weight: 400;
    }

    input[type="text"]:focus,
    input[type="email"]:focus {
      background: rgba(255, 255, 255, 0.3);
      box-shadow: 0 0 14px rgba(255,255,255,0.75);
      outline: none;
      transform: scale(1.02);
    }

    /* Hidden real file input */
    input[type="file"] {
      display: none;
    }

    /* Custom file chooser button */
    #customFileBtn {
      padding: 16px 0;
      border-radius: 14px;
      border: none;
      background: linear-gradient(90deg, #6b7df2, #9b6df2);
      color: white;
      font-weight: 600;
      font-size: 16px;
      cursor: pointer;
      box-shadow: 0 8px 22px rgba(107,125,242,0.6);
      transition: background 0.35s ease, box-shadow 0.35s ease, transform 0.2s ease;
      user-select: none;
      width: 100%;
      margin-bottom: 6px;
    }

    #customFileBtn:hover {
      background: linear-gradient(90deg, #5a6ad4, #824acf);
      box-shadow: 0 10px 30px rgba(130,74,207,0.8);
      transform: scale(1.04);
    }

    #customFileBtn:active {
      transform: scale(0.98);
      box-shadow: 0 6px 18px rgba(130,74,207,0.6);
    }

    #fileName {
      display: block;
      margin-top: 6px;
      font-size: 14px;
      color: #ddd;
      min-height: 20px;
      user-select: text;
      font-style: italic;
      letter-spacing: 0.2px;
    }

    button[type="submit"] {
      padding: 16px 0;
      border-radius: 14px;
      border: none;
      background: linear-gradient(90deg, #6b7df2, #9b6df2);
      color: white;
      font-weight: 600;
      font-size: 17px;
      cursor: pointer;
      box-shadow: 0 8px 22px rgba(107,125,242,0.6);
      transition: background 0.35s ease, box-shadow 0.35s ease, transform 0.2s ease;
      user-select: none;
    }

    button[type="submit"]:hover {
      background: linear-gradient(90deg, #5a6ad4, #824acf);
      box-shadow: 0 10px 30px rgba(130,74,207,0.8);
      transform: scale(1.04);
    }

    button[type="submit"]:active {
      transform: scale(0.98);
      box-shadow: 0 6px 18px rgba(130,74,207,0.6);
    }

    /* Preview container & label styling */
    .preview-container {
      margin: 28px auto 0;
      max-width: 220px;
      background: rgba(255, 255, 255, 0.12);
      border-radius: 22px;
      padding: 16px;
      box-shadow: 0 12px 36px rgba(0, 0, 0, 0.25);
      backdrop-filter: blur(8px);
      -webkit-backdrop-filter: blur(8px);
      transition: opacity 0.4s ease, transform 0.3s ease;
      opacity: 0;
      transform: translateY(20px);
      user-select: none;
      pointer-events: none;
    }

    .preview-container.show {
      opacity: 1;
      transform: translateY(0);
      pointer-events: auto;
    }

    .preview-label {
      font-size: 14px;
      color: #e0dfffcc;
      font-weight: 600;
      margin-bottom: 12px;
      text-align: center;
      text-shadow: 0 0 4px rgba(0,0,0,0.3);
      letter-spacing: 0.7px;
      user-select: text;
    }

    #preview {
      max-width: 100%;
      border-radius: 18px;
      box-shadow: 0 8px 30px rgba(255,255,255,0.45);
      display: block;
      margin: 0 auto;
      user-select: none;
    }

    #message {
      margin-top: 26px;
      font-weight: 600;
      min-height: 28px;
      color: #dcdcff;
      user-select: text;
      text-shadow: 0 0 8px rgba(0,0,0,0.35);
    }

    footer {
      margin-top: 36px;
      font-size: 14px;
      color: #cfcfe6cc;
      user-select: none;
      letter-spacing: 0.9px;
      text-shadow: 0 0 3px rgba(0,0,0,0.25);
    }

    @media (max-width: 420px) {
      .container {
        width: 90vw;
        padding: 36px 24px;
      }
      h2 {
        font-size: 1.8rem;
      }
      button[type="submit"], #customFileBtn, input[type="text"], input[type="email"] {
        font-size: 15px;
        padding: 14px 16px;
      }
    }
  </style>
</head>
<body>

  <div class="container" role="main" aria-label="Image upload form">
    <h2>Upload Image to Cloudinary</h2>

    <form id="uploadForm" enctype="multipart/form-data" autocomplete="off" aria-describedby="message">
      <input
        type="text"
        name="name"
        placeholder="Enter name"
        required
        aria-required="true"
        aria-label="Name"
      />
      <input
        type="text"
        name="tags"
        placeholder="Enter tags (optional)"
        aria-label="Tags"
      />
      <input
        type="email"
        name="email"
        placeholder="Enter email"
        required
        aria-required="true"
        aria-label="Email"
      />

      <!-- Hidden file input -->
      <input
        type="file"
        name="image"
        id="imageInput"
        accept="image/*"
        required
        aria-required="true"
        aria-label="Image file input"
      />

      <!-- Custom file chooser button -->
      <button type="button" id="customFileBtn" aria-label="Choose image file">Choose Image</button>
      <span id="fileName" aria-live="polite"></span>

      <button type="submit" aria-label="Upload image">Upload</button>
    </form>

    <div class="preview-container" aria-live="polite" aria-label="Image preview area" role="region" style="display:none;">
      <div class="preview-label">Image Preview</div>
      <img id="preview" src="" alt="Preview of selected image" />
    </div>

    <div id="message" role="alert" aria-live="polite"></div>
  </div>

  <footer>
    &copy; 2025 Amrish Yadav. All rights reserved.
  </footer>

  <script>
    const form = document.getElementById("uploadForm");
    const realFileInput = document.getElementById("imageInput");
    const customFileBtn = document.getElementById("customFileBtn");
    const fileNameSpan = document.getElementById("fileName");
    const preview = document.getElementById("preview");
    const previewContainer = document.querySelector(".preview-container");
    const message = document.getElementById("message");

    customFileBtn.addEventListener("click", () => {
      realFileInput.click();
    });

    realFileInput.addEventListener("change", () => {
      if (realFileInput.files.length > 0) {
        fileNameSpan.textContent = realFileInput.files[0].name;
      } else {
        fileNameSpan.textContent = "";
      }

      const file = realFileInput.files[0];
      if (file) {
        preview.src = URL.createObjectURL(file);
        previewContainer.style.display = "block";

        // Trigger animation
        setTimeout(() => {
          previewContainer.classList.add("show");
        }, 10);
      } else {
        previewContainer.classList.remove("show");
        setTimeout(() => {
          previewContainer.style.display = "none";
          preview.src = "";
        }, 400);
      }
    });

    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      const formData = new FormData(form);
      message.textContent = "Uploading...";

      try {
        const response = await fetch("/api/v1/upload/imageUpload", {
          method: "POST",
          body: formData,
        });

        const data = await response.json();

        if (data.success) {
          message.innerHTML = `
            ✅ Uploaded successfully! <br>
            <a href="${data.file.imageUrl}" target="_blank" rel="noopener noreferrer" style="color:#dcdcff;">
              View Image
            </a>
          `;
        } else {
          message.textContent = `❌ Upload failed: ${data.message || "Unknown error"}`;
        }
      } catch (error) {
        message.textContent = "❌ Error occurred during upload.";
      }
    });
  </script>

</body>
</html>
